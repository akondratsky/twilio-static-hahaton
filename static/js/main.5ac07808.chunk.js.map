{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","state","configuration","FlexWebChat","create","then","manager","setState","catch","error","this","className","console","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","render","appConfig","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2VAsCeA,E,kDA/Bb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAHRC,MAAQ,GAKN,IAAQC,EAAkBF,EAAlBE,cAHS,OAIjBC,UAAoBC,OAAOF,GACxBG,MAAK,SAAAC,GAAO,OAAI,EAAKC,SAAS,CAAED,eAChCE,OAAM,SAAAC,GAAK,OAAI,EAAKF,SAAS,CAAEE,aANjB,E,0CASnB,WACE,MAA2BC,KAAKT,MAAxBK,EAAR,EAAQA,QAASG,EAAjB,EAAiBA,MACjB,OAAIH,EAEA,6BACE,kBAAC,kBAAD,CAA6BA,QAASA,GACpC,kBAAC,gBAAD,OAEF,yBAAKK,UAAU,SAMjBF,GACFG,QAAQH,MAAM,qCAAsCA,GAG/C,U,GA/BOI,IAAMC,WCOlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTjB,MAAK,SAAAqB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfsB,UAAUC,cAAcO,WAK1BnB,QAAQoB,IAAI,6CAKZpB,QAAQoB,IAAI,4CAMrBxB,OAAM,SAAAC,GACLG,QAAQH,MAAM,4CAA6CA,MCpEjEwB,IAASC,OACL,kBAAC,EAAD,CAAKhC,cAAee,OAAOkB,YAC3BC,SAASC,eAAe,SDOb,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,GAAN,6BAEPxB,IAiDV,SAAiCO,GAE/BoB,MAAMpB,GACHjB,MAAK,SAAAsC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM3C,MAAK,SAAAqB,GACjCA,EAAauB,aAAa5C,MAAK,WAC7BY,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBd,OAAM,WACLI,QAAQoB,IACN,oEArEAmB,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAM3C,MAAK,WACjCO,QAAQoB,IACN,gHAMJX,EAAgBC,OChCxB8B,I","file":"static/js/main.5ac07808.chunk.js","sourcesContent":["import React from 'react';\nimport * as FlexWebChat from \"@twilio/flex-webchat-ui\";\n\nclass App extends React.Component {\n\n  state = {};\n\n  constructor(props) {\n    super(props);\n\n    const { configuration } = props;\n    FlexWebChat.Manager.create(configuration)\n      .then(manager => this.setState({ manager }))\n      .catch(error => this.setState({ error }));\n  }\n\n  render() {\n    const { manager, error } = this.state;\n    if (manager) {\n      return (\n        <div>\n          <FlexWebChat.ContextProvider manager={manager}>\n            <FlexWebChat.RootContainer />\n          </FlexWebChat.ContextProvider>\n          <div className=\"bg\" />\n        </div>\n\n      );\n    }\n\n    if (error) {\n      console.error(\"Failed to initialize Flex Web Chat\", error);\n    }\n\n    return null;\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/assets/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Comment out following polyfills if you don't need IE11 support\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'regenerator-runtime/runtime';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <App configuration={window.appConfig} />,\n    document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}